From cbffbd03bc3a11b4a0306efee01cad8773351a5a Mon Sep 17 00:00:00 2001
From: Dmitrii Pichulin <deem@deem.ru>
Date: Wed, 30 Jan 2019 15:04:56 +0300
Subject: [PATCH] boringssl GOSTSSL

---
 include/openssl/ssl.h   |   6 ++
 include/openssl/tls1.h  |   5 +
 ssl/handshake_client.cc |  11 ++
 ssl/internal.h          |  74 ++++++++++++++
 ssl/ssl_cipher.cc       |  50 +++++++++
 ssl/ssl_lib.cc          | 217 ++++++++++++++++++++++++++++++++++++++++
 6 files changed, 363 insertions(+)

diff --git a/include/openssl/ssl.h b/include/openssl/ssl.h
index 17c559259..50b582b35 100644
--- a/include/openssl/ssl.h
+++ b/include/openssl/ssl.h
@@ -167,6 +167,8 @@
 // However, only a forward declaration is needed.
 struct timeval;
 
+#define GOSTSSL
+
 #if defined(__cplusplus)
 extern "C" {
 #endif
@@ -4723,6 +4725,10 @@ BSSL_NAMESPACE_END
 
 #endif
 
+#if defined(GOSTSSL)
+#define SSL_R_TLS_GOST_REQUIRED 3072
+#endif
+
 #define SSL_R_APP_DATA_IN_HANDSHAKE 100
 #define SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT 101
 #define SSL_R_BAD_ALERT 102
diff --git a/include/openssl/tls1.h b/include/openssl/tls1.h
index 937be6b39..e802ebe80 100644
--- a/include/openssl/tls1.h
+++ b/include/openssl/tls1.h
@@ -603,6 +603,11 @@ extern "C" {
 #define TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 \
   "ECDHE-PSK-CHACHA20-POLY1305"
 
+#define TLS1_TXT_GOST2001_GOST89_GOST89 \
+  "GOST2001-GOST89-GOST89"
+#define TLS1_TXT_GOST2012_GOST8912_GOST8912 \
+  "GOST2012-GOST8912-GOST8912"
+
 // TLS 1.3 ciphersuites from RFC 8446.
 #define TLS1_TXT_AES_128_GCM_SHA256 "AEAD-AES128-GCM-SHA256"
 #define TLS1_TXT_AES_256_GCM_SHA384 "AEAD-AES256-GCM-SHA384"
diff --git a/ssl/handshake_client.cc b/ssl/handshake_client.cc
index c1d54bd8f..4d98a216e 100644
--- a/ssl/handshake_client.cc
+++ b/ssl/handshake_client.cc
@@ -703,6 +703,17 @@ static enum ssl_hs_wait_t do_read_server_hello(SSL_HANDSHAKE *hs) {
   }
   hs->new_cipher = cipher;
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      if( [&]()NOCFI{ return gostssl()->tls_gost_required( ssl ); }() )
+      {
+          ssl_send_alert( ssl, SSL3_AL_FATAL, SSL_AD_ILLEGAL_PARAMETER );
+          return ssl_hs_error;
+      }
+  }
+#endif
+
   // Now that the cipher is known, initialize the handshake hash and hash the
   // ServerHello.
   if (!hs->transcript.InitHash(ssl_protocol_version(ssl), hs->new_cipher) ||
diff --git a/ssl/internal.h b/ssl/internal.h
index f8a2ea70a..0f9bcfb08 100644
--- a/ssl/internal.h
+++ b/ssl/internal.h
@@ -441,6 +441,11 @@ BSSL_NAMESPACE_BEGIN
 #define SSL_kPSK 0x00000004u
 #define SSL_kGENERIC 0x00000008u
 
+#if defined(GOSTSSL)
+#define SSL_kGOST341001 0x00010000L
+#define SSL_kGOST341012 0x00020000L
+#endif
+
 // Bits for |algorithm_auth| (server authentication).
 #define SSL_aRSA 0x00000001u
 #define SSL_aECDSA 0x00000002u
@@ -448,6 +453,11 @@ BSSL_NAMESPACE_BEGIN
 #define SSL_aPSK 0x00000004u
 #define SSL_aGENERIC 0x00000008u
 
+#if defined(GOSTSSL)
+#define SSL_aGOST341001 0x00010000L
+#define SSL_aGOST341012 0x00020000L
+#endif
+
 #define SSL_aCERT (SSL_aRSA | SSL_aECDSA)
 
 // Bits for |algorithm_enc| (symmetric encryption).
@@ -459,6 +469,10 @@ BSSL_NAMESPACE_BEGIN
 #define SSL_eNULL 0x00000020u
 #define SSL_CHACHA20POLY1305 0x00000040u
 
+#if defined(GOSTSSL)
+#define SSL_eGOST28147 0x00010000L
+#endif
+
 #define SSL_AES (SSL_AES128 | SSL_AES256 | SSL_AES128GCM | SSL_AES256GCM)
 
 // Bits for |algorithm_mac| (symmetric authentication).
@@ -466,6 +480,10 @@ BSSL_NAMESPACE_BEGIN
 // SSL_AEAD is set for all AEADs.
 #define SSL_AEAD 0x00000002u
 
+#if defined(GOSTSSL)
+#define SSL_iGOST28147 0x00010000L
+#endif
+
 // Bits for |algorithm_prf| (handshake digest).
 #define SSL_HANDSHAKE_MAC_DEFAULT 0x1
 #define SSL_HANDSHAKE_MAC_SHA256 0x2
@@ -2788,6 +2806,62 @@ void ssl_set_read_error(SSL *ssl);
 
 BSSL_NAMESPACE_END
 
+#if defined(GOSTSSL)
+extern "C" {
+//
+#ifndef _WIN32
+#define EXPLICITSSL_CALL
+#else
+#if defined ( _M_IX86 )
+#define EXPLICITSSL_CALL __cdecl
+#elif defined ( _M_X64 )
+#define EXPLICITSSL_CALL __fastcall
+#endif
+#endif // _WIN32
+//
+int boring_BIO_read( SSL * s, void * data, int len );
+int boring_BIO_write( SSL * s, const void * data, int len );
+void boring_ERR_clear_error( void );
+void boring_ERR_put_error( int, int, int, const char * file, unsigned line );
+const SSL_CIPHER * boring_SSL_get_cipher_by_value( uint16_t value );
+char boring_set_ca_names_cb( SSL * s, const void ** bufs, int * lens, size_t count );
+char boring_set_connected_cb( SSL * s, const char * alpn, size_t alpn_len, uint16_t version, uint16_t cipher_id, const char ** cert_bufs, int * cert_lens, size_t cert_count );
+//
+struct boringssl_method_st
+{
+    int ( EXPLICITSSL_CALL * boring_BIO_read )( SSL * s, void * data, int len );
+    int ( EXPLICITSSL_CALL * boring_BIO_write )( SSL * s, const void * data, int len );
+    void ( EXPLICITSSL_CALL * boring_ERR_clear_error )( void );
+    void ( EXPLICITSSL_CALL * boring_ERR_put_error )( int, int, int, const char * file, unsigned line );
+    const SSL_CIPHER * ( EXPLICITSSL_CALL * boring_SSL_get_cipher_by_value )( uint16_t value );
+    char ( EXPLICITSSL_CALL * boring_set_ca_names_cb )( SSL * s, const char ** bufs, int * lens, size_t count );
+    char ( EXPLICITSSL_CALL * boring_set_connected_cb )( SSL * s, const char * alpn, size_t alpn_len, uint16_t version, uint16_t cipher_id, const char ** cert_bufs, int * cert_lens, size_t cert_count );
+};
+//
+typedef struct boringssl_method_st BORINGSSL_METHOD;
+//
+#if defined( __has_attribute )
+#define NOCFI __attribute__((no_sanitize("cfi-icall")))
+#else
+#define NOCFI
+#endif
+//
+struct gostssl_method_st
+{
+    int  ( EXPLICITSSL_CALL * init )( BORINGSSL_METHOD * bssl_methods );
+    int  ( EXPLICITSSL_CALL * connect )( SSL * s, int * is_gost );
+    int  ( EXPLICITSSL_CALL * read )( SSL * s, void * buf, int len, int * is_gost );
+    int  ( EXPLICITSSL_CALL * write )( SSL * s, const void * buf, int len, int * is_gost );
+    void ( EXPLICITSSL_CALL * free )( SSL * s );
+    int  ( EXPLICITSSL_CALL * tls_gost_required )( SSL * s );
+};
+//
+typedef struct gostssl_method_st GOSTSSL_METHOD;
+//
+GOSTSSL_METHOD * gostssl();
+//
+}
+#endif
 
 // Opaque C types.
 //
diff --git a/ssl/ssl_cipher.cc b/ssl/ssl_cipher.cc
index a420f4dd9..acd23752b 100644
--- a/ssl/ssl_cipher.cc
+++ b/ssl/ssl_cipher.cc
@@ -209,6 +209,20 @@ static constexpr SSL_CIPHER kCiphers[] = {
      SSL_HANDSHAKE_MAC_DEFAULT,
     },
 
+#if defined(GOSTSSL)
+    /* Cipher 81 (GOSTSSL) */
+    {
+        TLS1_TXT_GOST2001_GOST89_GOST89,
+        "TLS_GOSTR341001_WITH_28147_CNT_IMIT",
+        0x03000081,
+        SSL_kGOST341001,
+        SSL_aGOST341001,
+        SSL_eGOST28147,
+        SSL_iGOST28147,
+        SSL_HANDSHAKE_MAC_DEFAULT,
+    },
+#endif
+
     // PSK cipher suites.
 
     // Cipher 8C
@@ -461,6 +475,20 @@ static constexpr SSL_CIPHER kCiphers[] = {
      SSL_HANDSHAKE_MAC_SHA256,
     },
 
+#if defined(GOSTSSL)
+    /* Cipher FF85 (GOSTSSL) */
+    {
+        TLS1_TXT_GOST2012_GOST8912_GOST8912,
+        "TLS_GOSTR341012_256_WITH_28147_CNT_IMIT",
+        0x0300FF85,
+        SSL_kGOST341012,
+        SSL_aGOST341012,
+        SSL_eGOST28147,
+        SSL_iGOST28147,
+        SSL_HANDSHAKE_MAC_DEFAULT,
+    },
+#endif
+
 };
 
 Span<const SSL_CIPHER> AllCiphers() {
@@ -1207,6 +1235,17 @@ bool ssl_create_cipher_list(UniquePtr<SSLCipherPreferenceList> *out_cipher_list,
   ssl_cipher_apply_rule(0, ~0u, ~0u, SSL_3DES, ~0u, 0, CIPHER_ADD, -1, false,
                         &head, &tail);
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      ssl_cipher_apply_rule( 0, ~0u, ~0u, SSL_eGOST28147, ~0u, 0, CIPHER_ADD, -1, 0, &head, &tail );
+  }
+  else
+  {
+      ssl_cipher_apply_rule( 0, ~0u, ~0u, SSL_eGOST28147, ~0u, 0, CIPHER_KILL, -1, 0, &head, &tail );
+  }
+#endif
+
   // Temporarily enable everything else for sorting
   ssl_cipher_apply_rule(0, ~0u, ~0u, ~0u, ~0u, 0, CIPHER_ADD, -1, false, &head,
                         &tail);
@@ -1418,6 +1457,10 @@ int SSL_CIPHER_get_kx_nid(const SSL_CIPHER *cipher) {
     case SSL_kRSA:
       return NID_kx_rsa;
     case SSL_kECDHE:
+#ifdef GOSTSSL
+    case SSL_kGOST341001:
+    case SSL_kGOST341012:
+#endif
       return NID_kx_ecdhe;
     case SSL_kPSK:
       return NID_kx_psk;
@@ -1433,6 +1476,10 @@ int SSL_CIPHER_get_auth_nid(const SSL_CIPHER *cipher) {
     case SSL_aRSA:
       return NID_auth_rsa;
     case SSL_aECDSA:
+#ifdef GOSTSSL
+    case SSL_kGOST341001:
+    case SSL_kGOST341012:
+#endif
       return NID_auth_ecdsa;
     case SSL_aPSK:
       return NID_auth_psk;
@@ -1555,6 +1602,9 @@ int SSL_CIPHER_get_bits(const SSL_CIPHER *cipher, int *out_alg_bits) {
 
     case SSL_AES256:
     case SSL_AES256GCM:
+#if defined(GOSTSSL)
+    case SSL_eGOST28147:
+#endif
     case SSL_CHACHA20POLY1305:
       alg_bits = 256;
       strength_bits = 256;
diff --git a/ssl/ssl_lib.cc b/ssl/ssl_lib.cc
index b9c823d95..2cbc80944 100644
--- a/ssl/ssl_lib.cc
+++ b/ssl/ssl_lib.cc
@@ -533,6 +533,178 @@ static int ssl_session_cmp(const SSL_SESSION *a, const SSL_SESSION *b) {
   return OPENSSL_memcmp(a->session_id, b->session_id, a->session_id_length);
 }
 
+#if defined(GOSTSSL)
+
+#ifdef _WIN32
+#if defined(_M_IX86)
+#define EXPLICITSSL_CALL __cdecl
+#elif defined(_M_X64)
+#define EXPLICITSSL_CALL __fastcall
+#endif
+#define GOSTSSLLIB "gostssl.dll"
+#define LIBLOAD(name) LoadLibraryExA(name, 0, LOAD_LIBRARY_SEARCH_APPLICATION_DIR)
+#define LIBFUNC(lib, name) (UINT_PTR) GetProcAddress(lib, name)
+#else  // not _WIN32
+#define EXPLICITSSL_CALL
+#include <dlfcn.h>
+#define GOSTSSLLIB "gostssl.so"
+#define LIBLOAD(name) dlopen(name, RTLD_LAZY)
+#define LIBFUNC(lib, name) dlsym(lib, name)
+typedef void *HMODULE;
+#endif  // _WIN32
+
+int boring_BIO_read(SSL *s, void *data, int len) {
+  return BIO_read(s->rbio.get(), data, len);
+}
+
+int boring_BIO_write(SSL *s, const void *data, int len) {
+  return BIO_write(s->wbio.get(), data, len);
+}
+
+void boring_ERR_clear_error(void) { ERR_clear_error(); }
+
+void boring_ERR_put_error(int a, int b, int c, const char *file,
+                          unsigned line) {
+  ERR_put_error(a, b, c, file, line);
+}
+
+const SSL_CIPHER *boring_SSL_get_cipher_by_value(uint16_t value) {
+  return SSL_get_cipher_by_value(value);
+}
+
+// (ssl_parse_client_CA_list)
+char boring_set_ca_names_cb(SSL *ssl, const char **bufs, int *lens,
+                            size_t count) {
+  UniquePtr<STACK_OF(CRYPTO_BUFFER)> ret(sk_CRYPTO_BUFFER_new_null());
+
+  if (!ret)
+    return 0;
+
+  for (size_t i = 0; i < count; i++) {
+    UniquePtr<CRYPTO_BUFFER> buffer(
+        CRYPTO_BUFFER_new((const uint8_t *)bufs[i], lens[i], ssl->ctx->pool));
+
+    if (!buffer || !PushToStack(ret.get(), std::move(buffer)))
+      return 0;
+  }
+
+  if (!ssl->ctx->x509_method->check_client_CA_list(ret.get()))
+    return 0;
+
+  ssl->s3->hs->cert_request = true;
+  ssl->s3->hs->ca_names = std::move(ret);
+
+  return 1;
+}
+
+char boring_set_connected_cb(SSL *ssl, const char *alpn, size_t alpn_len,
+                             uint16_t version, uint16_t cipher_id,
+                             const char **bufs, int *lens, size_t count) {
+  // ALPN (ssl_negotiate_alpn)
+  {
+    if (!ssl->s3->alpn_selected.CopyFrom(
+            Span<uint8_t>((uint8_t *)alpn, alpn_len)))
+      return 0;
+  }
+
+  // VERSION + CIPHER
+  {
+    const SSL_CIPHER *cipher;
+
+    cipher = SSL_get_cipher_by_value(cipher_id);
+
+    if (!cipher)
+      return 0;
+
+    ssl->version = version;
+    ssl->s3->have_version = 1;
+
+    if (ssl_get_new_session(ssl->s3->hs.get(), 0) <= 0)
+      return 0;
+
+    ssl->s3->established_session = std::move(ssl->s3->hs->new_session);
+    ssl->s3->hs->new_session.reset();
+
+    ssl->s3->established_session->ssl_version = ssl->version;
+    ssl->s3->established_session->cipher = cipher;
+  }
+
+  // SERVER CERTIFICATES (ssl_parse_cert_chain)
+  {
+    UniquePtr<STACK_OF(CRYPTO_BUFFER)> ret(sk_CRYPTO_BUFFER_new_null());
+
+    if (!ret)
+      return 0;
+
+    for (size_t i = 0; i < count; i++) {
+      UniquePtr<CRYPTO_BUFFER> buffer(
+          CRYPTO_BUFFER_new((const uint8_t *)bufs[i], lens[i], ssl->ctx->pool));
+
+      if (!buffer || !PushToStack(ret.get(), std::move(buffer)))
+        return 0;
+    }
+
+    ssl->s3->established_session->certs = std::move(ret);
+  }
+
+  // SSL_CB_HANDSHAKE_DONE
+  if (ssl->info_callback != NULL)
+    ssl->info_callback(ssl, SSL_CB_HANDSHAKE_DONE, 1);
+  else if (ssl->ctx->info_callback != NULL)
+    ssl->ctx->info_callback(ssl, SSL_CB_HANDSHAKE_DONE, 1);
+
+  ssl->s3->hs->handshake_finalized = true;
+  ssl->s3->initial_handshake_complete = true;
+  return 1;
+}
+
+static BORINGSSL_METHOD gostssl_bssl = {
+    boring_BIO_read,
+    boring_BIO_write,
+    boring_ERR_clear_error,
+    boring_ERR_put_error,
+    boring_SSL_get_cipher_by_value,
+    boring_set_ca_names_cb,
+    boring_set_connected_cb,
+};
+
+GOSTSSL_METHOD *gostssl() {
+  static GOSTSSL_METHOD gssl = {0};
+  static int is_gost = 0;
+  static int is_tried = 0;
+
+  if (is_gost)
+    return &gssl;
+
+  if (!is_tried) {
+    HMODULE hGSSL = LIBLOAD(GOSTSSLLIB);
+
+    if (hGSSL) {
+      *(uintptr_t *)&gssl.init = (uintptr_t)LIBFUNC(hGSSL, "gostssl_init");
+      *(uintptr_t *)&gssl.connect =
+          (uintptr_t)LIBFUNC(hGSSL, "gostssl_connect");
+      *(uintptr_t *)&gssl.read = (uintptr_t)LIBFUNC(hGSSL, "gostssl_read");
+      *(uintptr_t *)&gssl.write = (uintptr_t)LIBFUNC(hGSSL, "gostssl_write");
+      *(uintptr_t *)&gssl.free = (uintptr_t)LIBFUNC(hGSSL, "gostssl_free");
+      *(uintptr_t *)&gssl.tls_gost_required =
+          (uintptr_t)LIBFUNC(hGSSL, "gostssl_tls_gost_required");
+
+      if (gssl.init && gssl.connect && gssl.read && gssl.write && gssl.free &&
+          gssl.tls_gost_required &&
+          [&]() NOCFI { return gssl.init(&gostssl_bssl); }()) {
+        is_gost = 1;
+        return &gssl;
+      }
+    }
+
+    is_tried = 1;
+  }
+
+  return NULL;
+}
+
+#endif
+
 ssl_ctx_st::ssl_ctx_st(const SSL_METHOD *ssl_method)
     : method(ssl_method->method),
       x509_method(ssl_method->x509_method),
@@ -723,6 +895,11 @@ SSL_CONFIG::~SSL_CONFIG() {
 }
 
 void SSL_free(SSL *ssl) {
+#if defined(GOSTSSL)
+  if (ssl && gostssl()) {
+    [&]() NOCFI { gostssl()->free(ssl); }();
+  }
+#endif
   Delete(ssl);
 }
 
@@ -851,6 +1028,17 @@ int SSL_provide_quic_data(SSL *ssl, enum ssl_encryption_level_t level,
 }
 
 int SSL_do_handshake(SSL *ssl) {
+#if defined(GOSTSSL)
+  if (gostssl()) {
+    int is_gost;
+    int ret_gost;
+
+    ret_gost = [&]() NOCFI { return gostssl()->connect(ssl, &is_gost); }();
+
+    if (is_gost)
+      return ret_gost;
+  }
+#endif
   ssl_reset_error_state(ssl);
 
   if (ssl->do_handshake == NULL) {
@@ -1042,6 +1230,18 @@ static int ssl_read_impl(SSL *ssl) {
 }
 
 int SSL_read(SSL *ssl, void *buf, int num) {
+#if defined(GOSTSSL)
+  if (gostssl()) {
+    int is_gost;
+    int ret_gost;
+
+    ret_gost = [&]()
+                   NOCFI { return gostssl()->read(ssl, buf, num, &is_gost); }();
+
+    if (is_gost)
+      return ret_gost;
+  }
+#endif
   int ret = SSL_peek(ssl, buf, num);
   if (ret <= 0) {
     return ret;
@@ -1076,6 +1276,19 @@ int SSL_peek(SSL *ssl, void *buf, int num) {
 }
 
 int SSL_write(SSL *ssl, const void *buf, int num) {
+#if defined(GOSTSSL)
+  if (gostssl()) {
+    int is_gost;
+    int ret_gost;
+
+    ret_gost = [&]() NOCFI {
+      return gostssl()->write(ssl, buf, num, &is_gost);
+    }();
+
+    if (is_gost)
+      return ret_gost;
+  }
+#endif
   ssl_reset_error_state(ssl);
 
   if (ssl->ctx->quic_method != nullptr) {
@@ -2298,6 +2511,10 @@ EVP_PKEY *SSL_CTX_get0_privatekey(const SSL_CTX *ctx) {
 }
 
 const SSL_CIPHER *SSL_get_current_cipher(const SSL *ssl) {
+#ifdef GOSTSSL
+  if (ssl->s3->established_session && ssl->s3->established_session->cipher)
+    return ssl->s3->established_session->cipher;
+#endif
   const SSL_SESSION *session = SSL_get_session(ssl);
   return session == nullptr ? nullptr : session->cipher;
 }
-- 
2.17.0.windows.1

