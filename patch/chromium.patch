From a9e556e5019737c1c7299182b87c1060d57868bb Mon Sep 17 00:00:00 2001
From: Dmitrii Pichulin <deem@deem.ru>
Date: Thu, 12 Dec 2019 11:20:50 +0300
Subject: [PATCH] chromium GOSTSSL

---
 chrome/app/chromium_strings.grd               |  70 ++++++------
 chrome/browser/devtools/devtools_window.cc    |  16 +++
 .../ssl_client_certificate_selector_mac.mm    |   8 ++
 .../chromium-browser/chromium-browser.info    |  10 +-
 .../installer/linux/rpm/chrome.spec.template  |   4 +
 content/browser/storage_partition_impl.cc     |   9 ++
 net/base/net_error_list.h                     |   5 +
 net/cert/cert_verify_proc.cc                  |  23 ++++
 net/http/http_network_transaction.cc          |   9 ++
 net/socket/ssl_client_socket_impl.cc          | 101 ++++++++++++++++++
 net/spdy/spdy_session.cc                      |  12 +++
 net/ssl/client_cert_store_mac.cc              |  80 ++++++++++++++
 net/ssl/client_cert_store_nss.cc              |  31 ++++++
 net/ssl/openssl_ssl_util.cc                   |   4 +
 net/ssl/ssl_cipher_suite_names.cc             |  26 +++++
 net/ssl/ssl_platform_key_util.cc              |  21 ++++
 net/ssl/ssl_platform_key_util.h               |   7 ++
 sandbox/win/src/process_mitigations.cc        |   4 +
 .../service_manager/sandbox/mac/common.sb     |   8 ++
 third_party/boringssl/BUILD.generated.gni     |   2 +
 20 files changed, 410 insertions(+), 40 deletions(-)

diff --git a/chrome/app/chromium_strings.grd b/chrome/app/chromium_strings.grd
index 7b8a2fd6b1e6..942422e9c73d 100644
--- a/chrome/app/chromium_strings.grd
+++ b/chrome/app/chromium_strings.grd
@@ -127,10 +127,10 @@ If you update this file, be sure also to update google_chrome_strings.grd. -->
       </if>
 
       <message name="IDS_PRODUCT_NAME" desc="The Chrome application name">
-        Chromium
+        Chromium GOST
       </message>
       <message name="IDS_SHORT_PRODUCT_NAME" desc="The Chrome application short name.">
-        Chromium
+        Chromium GOST
       </message>
       <if expr="is_win">
         <message name="IDS_SXS_SHORTCUT_NAME" desc="Unused in Chromium builds" translateable="false">
@@ -162,10 +162,10 @@ If you update this file, be sure also to update google_chrome_strings.grd. -->
         </message>
       </if>
       <message name="IDS_BOOKMARK_SYNC_PROMO_LINK" desc="Text of the link to sign in from the bookmark sync promo.">
-        sign in to Chromium
+        sign in to Chromium GOST
       </message>
       <message name="IDS_TASK_MANAGER_TITLE" desc="The title of the Task Manager window">
-        Task Manager - Chromium
+        Task Manager - Chromium GOST
       </message>
       <message name="IDS_SESSION_CRASHED_VIEW_UMA_OPTIN" desc="Text besides the checkbox to let users optin to UMA in the restore from previous crash bubble.">
         Help make Chromium better by sending crash reports and <ph name="UMA_LINK">$1<ex>usage statistics</ex></ph> to Google
@@ -173,7 +173,7 @@ If you update this file, be sure also to update google_chrome_strings.grd. -->
       <if expr="not chromeos">
         <!-- Browser Window Title Format -->
         <message name="IDS_BROWSER_WINDOW_TITLE_FORMAT" desc="The format for titles displayed in tabs and popup windows">
-          <ph name="PAGE_TITLE">$1<ex>Google</ex></ph> - Chromium
+          <ph name="PAGE_TITLE">$1<ex>Google</ex></ph> - Chromium GOST
         </message>
       </if>
       <if expr="chromeos">
@@ -185,7 +185,7 @@ If you update this file, be sure also to update google_chrome_strings.grd. -->
       <!-- Accessible window title format - includes the channel, and the same
            on all browser platforms rather than different on Chrome OS. -->
       <message name="IDS_ACCESSIBLE_BROWSER_WINDOW_TITLE_FORMAT" desc="The format for the accessible name of a tabbed browser window">
-        <ph name="PAGE_TITLE">$1<ex>Google</ex></ph> - Chromium
+        <ph name="PAGE_TITLE">$1<ex>Google</ex></ph> - Chromium GOST
       </message>
       <message name="IDS_ACCESSIBLE_BETA_BROWSER_WINDOW_TITLE_FORMAT" desc="The format for the accessible name of a tabbed browser window for the beta channel version of the browser">
         <ph name="PAGE_TITLE">$1<ex>Google</ex></ph> - Chromium Beta
@@ -227,7 +227,7 @@ If you update this file, be sure also to update google_chrome_strings.grd. -->
         </message>
       </if>
       <message name="IDS_ACCNAME_APP" desc="The accessible name for the app menu.">
-        Chromium
+        Chromium GOST
       </message>
       <!-- Hung Browser Detector -->
       <if expr="is_win">
@@ -244,7 +244,7 @@ If you update this file, be sure also to update google_chrome_strings.grd. -->
           Are you sure you want to uninstall Chromium?
         </message>
         <message name="IDS_UNINSTALL_CHROME" desc="The title of the Chromium uninstall dialog.">
-          Uninstall Chromium
+          Uninstall Chromium GOST
         </message>
       </if>
       <message name="IDS_FR_CUSTOMIZE_DEFAULT_BROWSER" desc="Default browser checkbox label">
@@ -292,7 +292,7 @@ Chromium is unable to recover your settings.
       </message>
       <!-- Crash Recovery Dialog -->
       <message name="IDS_CRASH_RECOVERY_TITLE" desc="Title of dialog shown when the browser crashes.">
-        Chromium
+        Chromium GOST
       </message>
       <if expr="is_win">
         <message name="IDS_CRASH_RECOVERY_CONTENT" desc="Text content telling the user the browser has crashed.">
@@ -308,7 +308,7 @@ Chromium is unable to recover your settings.
         Chromium lets you know if your passwords are ever compromised
       </message>
       <message name="IDS_PASSWORD_MANAGER_TITLE_BRAND" desc="The product name used in the title of the password bubble.">
-        Chromium
+        Chromium GOST
       </message>
       <if expr="is_macosx">
         <message name="IDS_PASSWORDS_PAGE_AUTHENTICATION_PROMPT" desc="Text for the dialog box that prompts the user for their OS account password before revealing plaintext passwords on the password page.">
@@ -460,10 +460,10 @@ Chromium is unable to recover your settings.
       <if expr="enable_extensions">
         <!-- Extension installed bubble -->
         <message name="IDS_EXTENSION_INSTALLED_HEADING" desc="Title of the extension-installed bubble. Instructs that the extension was installed.">
-          <ph name="EXTENSION_NAME">$1<ex>Gmail Checker</ex></ph> has been added to Chromium
+          <ph name="EXTENSION_NAME">$1<ex>Gmail Checker</ex></ph> has been added to Chromium GOST
         </message>
         <message name="IDS_EXTENSION_INSTALLED_SYNC_PROMO_LINK_NEW" desc="Text of the link to sign in to Chromium from the extension installed bubble. This will be converted to a link, with additional text around it.">
-          sign in to Chromium
+          sign in to Chromium GOST
         </message>
 
         <!-- Extension uninstall prompt -->
@@ -492,7 +492,7 @@ Chromium is unable to recover your settings.
         Remove from Chromium...
       </message>
       <message name="IDS_EXTENSIONS_SHORTCUT_SCOPE_IN_CHROME" desc="The label to indicate that a shortcut will be triggerable only from within the Chrome application.">
-        In Chromium
+        In Chromium GOST
       </message>
 
       <if expr="enable_extensions">
@@ -506,7 +506,7 @@ Chromium is unable to recover your settings.
 
       <!-- Main Chrome menu -->
       <message name="IDS_APPMENU_TOOLTIP" desc="The tooltip to show for the browser menu">
-        Customize and control Chromium
+        Customize and control Chromium GOST
       </message>
 
       <message name="IDS_APPMENU_TOOLTIP_UPDATE_AVAILABLE" desc="The tooltip to show for the browser menu when an update is available">
@@ -518,28 +518,28 @@ Chromium is unable to recover your settings.
       </message>
 
       <message name="IDS_OPEN_IN_CHROME" desc="The text label of the Open in Chrome menu item for the Hosted App app menu">
-        &amp;Open in Chromium
+        &amp;Open in Chromium GOST
       </message>
 
       <if expr="use_titlecase and not chromeos">
         <message name="IDS_ABOUT" desc="In Title Case: The text label of the About Chrome menu item">
-          About &amp;Chromium
+          About &amp;Chromium GOST
         </message>
         <message name="IDS_UPDATE_NOW" desc="In Title Case: The text label of the Update Chrome Now menu item">
-          Update &amp;Chromium
+          Update &amp;Chromium GOST
         </message>
       </if>
       <if expr="not use_titlecase and not chromeos">
         <message name="IDS_ABOUT" desc="The text label of the About Chrome menu item">
-          About &amp;Chromium
+          About &amp;Chromium GOST
         </message>
         <message name="IDS_UPDATE_NOW" desc="The text label of the Update Chrome Now menu item">
-          Update &amp;Chromium
+          Update &amp;Chromium GOST
         </message>
       </if>
       <if expr="chromeos">
         <message name="IDS_ABOUT" desc="The text label of the About Chrome menu item">
-          About &amp;Chromium
+          About &amp;Chromium GOST
         </message>
         <message name="IDS_ABOUT_OS" desc="The text label of the About Chrome OS menu item">
           About &amp;Chromium OS
@@ -551,7 +551,7 @@ Chromium is unable to recover your settings.
 
       <if expr="is_macosx">
         <message name="IDS_APP_MENU_PRODUCT_NAME" desc="The application's short name, used for the Mac's application menu, activity monitor, etc. This should be less than 16 characters. Example: Chrome, not Google Chrome.">
-          Chromium
+          Chromium GOST
         </message>
         <message name="IDS_HELPER_NAME" desc="The helper application's name.  Should contain the Chrome application name (IDS_PRODUCT_NAME). Example: Google Chrome Helper.">
           Chromium Helper
@@ -563,7 +563,7 @@ Chromium is unable to recover your settings.
 
       <!-- Chrome sign-in page -->
       <message name="IDS_CHROME_SIGNIN_TITLE" desc="Title on the about:chrome-signin page">
-        Chromium
+        Chromium GOST
       </message>
 
       <!-- DICE sign-in promo strings -->
@@ -614,7 +614,7 @@ Chromium is unable to recover your settings.
       <!-- Signin Email Confirmation tab modal dialog -->
       <if expr="not chromeos">
         <message name="IDS_SIGNIN_EMAIL_CONFIRMATION_TITLE" desc="Title of the signin email confirmation tab modal dialog.">
-          <ph name="USER_EMAIL_ADDRESS">$1<ex>foo@gmail.com</ex></ph> was previously using Chromium
+          <ph name="USER_EMAIL_ADDRESS">$1<ex>foo@gmail.com</ex></ph> was previously using Chromium GOST
         </message>
       </if>
 
@@ -741,7 +741,7 @@ Chromium is unable to recover your settings.
           Now it's easier to use Chromium with your Google Account and on shared computers.
         </message>
         <message name="IDS_USER_MANAGER_TUTORIAL_SLIDE_YOUR_CHROME_TITLE" desc="Title of the slide about personalizing the browser">
-          This is your Chromium
+          This is your Chromium GOST
         </message>
         <message name="IDS_USER_MANAGER_TUTORIAL_SLIDE_YOUR_CHROME_TEXT" desc="Main text of the slide about personalizing the browser">
           Your web, bookmarks, and other Chromium stuff live here.
@@ -756,7 +756,7 @@ Chromium is unable to recover your settings.
           Click your name to open Chromium and start browsing.
         </message>
         <message name="IDS_USER_MANAGER_TUTORIAL_SLIDE_OUTRO_ADD_USER" desc="Text of the add a new user button">
-          Add yourself to Chromium
+          Add yourself to Chromium GOST
         </message>
       </if>
 
@@ -835,7 +835,7 @@ Chromium is unable to recover your settings.
       <!-- Update Recommended dialog -->
       <if expr="not chromeos">
         <message name="IDS_UPDATE_RECOMMENDED_DIALOG_TITLE" desc="The window title for the Update Recommended dialog.">
-          Relaunch Chromium
+          Relaunch Chromium GOST
         </message>
         <message name="IDS_UPDATE_RECOMMENDED" desc="The main text of the Update Recommended dialog with a count of open incognito windows.">
           {COUNT, plural,
@@ -872,7 +872,7 @@ Chromium is unable to recover your settings.
 
       <!-- Update bubble -->
       <message name="IDS_REINSTALL_APP" desc="Text for the button the user clicks to reinstall the app.">
-        Reinstall Chromium
+        Reinstall Chromium GOST
       </message>
       <if expr="use_titlecase">
         <message name="IDS_UPGRADE_BUBBLE_MENU_ITEM" desc="In Title Case: Text for the Chrome menu option replacing Update required.">
@@ -885,7 +885,7 @@ Chromium is unable to recover your settings.
         </message>
       </if>
       <message name="IDS_UPGRADE_BUBBLE_TITLE" desc="Text for the title of the upgrade bubble view.">
-        Can't update Chromium
+        Can't update Chromium GOST
       </message>
       <message name="IDS_UPGRADE_BUBBLE_TEXT" desc="Text for the upgrade bubble view full description.">
         Chromium couldn't update to the latest version, so you're missing out on new features and security fixes.
@@ -896,7 +896,7 @@ Chromium is unable to recover your settings.
         Chromium is out of date
       </message>
       <message name="IDS_SYNC_ERROR_USER_MENU_UPGRADE_BUTTON" desc="Button in the header of desktop user menu that prompts the user to update Chrome to fix the out-of-date Chrome client error.">
-        Update Chromium
+        Update Chromium GOST
       </message>
 
       <!-- Sync errors. Android uses native UI to handle Sync settings -->
@@ -905,7 +905,7 @@ Chromium is unable to recover your settings.
           Update Chromium to start sync
         </message>
         <message name="IDS_SYNC_UPGRADE_CLIENT_LINK_LABEL" desc="Hyperlink text indicating client needs to be upgraded to the latest version.">
-          Update Chromium
+          Update Chromium GOST
         </message>
       </if>
 
@@ -915,12 +915,12 @@ Chromium is unable to recover your settings.
       </message>
       <if expr="use_titlecase">
         <message name="IDS_RUN_RECOVERY" desc="In Title Case: Text for the button the user clicks to recover chromium and its updater.">
-          Update Chromium
+          Update Chromium GOST
         </message>
       </if>
       <if expr="not use_titlecase">
         <message name="IDS_RUN_RECOVERY" desc="Text for the button the user clicks to recover chromium and its updater.">
-          Update Chromium
+          Update Chromium GOST
         </message>
       </if>
       <message name="IDS_RECOVERY_BUBBLE_TEXT" desc="Text for the chrome recovery bubble view full description.">
@@ -996,7 +996,7 @@ Chromium is unable to recover your settings.
       <!-- Welcome page (chrome://welcome) strings -->
       <if expr="not chromeos and not is_android">
         <message name="IDS_WELCOME_HEADER" desc="A message which will appear as the header on the Welcome UI if the user has never run Chromium before.">
-          Welcome to Chromium
+          Welcome to Chromium GOST
         </message>
       </if>
 
@@ -1059,7 +1059,7 @@ Chromium is unable to recover your settings.
           Couldn't launch Chromium. Try again.
         </message>
         <message name="IDS_ENTERPRISE_STARTUP_RELAUNCH_BUTTON" desc="The text of relaunch button of Chromium launch blocking dialog.">
-          Relaunch Chromium
+          Relaunch Chromium GOST
         </message>
       </if>
       <message name="IDS_DESKTOP_MEDIA_PICKER_TITLE_WEB_CONTENTS_ONLY" desc="Title for the window picker dialog shown when desktop capture of a tab is requested by an app.">
@@ -1068,7 +1068,7 @@ Chromium is unable to recover your settings.
       <!-- User happiness tracking survey UI -->
       <if expr="not is_android">
         <message name="IDS_HATS_BUBBLE_TITLE" translateable="false" desc="The title of Happiness Tracking Survey's invitation banner, it invites users to take a survey">
-          Help us improve Chromium
+          Help us improve Chromium GOST
         </message>
       </if>
     </messages>
diff --git a/chrome/browser/devtools/devtools_window.cc b/chrome/browser/devtools/devtools_window.cc
index f0e249161a7c..12d835f14818 100644
--- a/chrome/browser/devtools/devtools_window.cc
+++ b/chrome/browser/devtools/devtools_window.cc
@@ -1464,6 +1464,12 @@ void DevToolsWindow::RenderProcessGone(bool crashed) {
   }
 }
 
+#ifndef NO_GOSTSSL
+extern "C" {
+void gostssl_isgostcerthook( void * cert, int size, int * is_gost );
+}
+#endif // GOSTSSL
+
 void DevToolsWindow::ShowCertificateViewer(const std::string& cert_chain) {
   base::Optional<base::Value> value = base::JSONReader::Read(cert_chain);
   CHECK(value && value->is_list());
@@ -1472,6 +1478,16 @@ void DevToolsWindow::ShowCertificateViewer(const std::string& cert_chain) {
     CHECK(item.is_string());
     std::string temp;
     CHECK(base::Base64Decode(item.GetString(), &temp));
+#ifndef NO_GOSTSSL
+    {
+        {
+            int is_gost = 0;
+            gostssl_isgostcerthook( (void *)&temp[0], temp.size(), &is_gost );
+            if( is_gost == 1 )
+                return;
+        }
+    }
+#endif // GOSTSSL
     decoded.push_back(std::move(temp));
   }
 
diff --git a/chrome/browser/ui/views/ssl_client_certificate_selector_mac.mm b/chrome/browser/ui/views/ssl_client_certificate_selector_mac.mm
index 81080ad3f498..d38678111095 100644
--- a/chrome/browser/ui/views/ssl_client_certificate_selector_mac.mm
+++ b/chrome/browser/ui/views/ssl_client_certificate_selector_mac.mm
@@ -239,6 +239,14 @@ initWithBrowserContext:(const content::BrowserContext*)browserContext
                  clientCerts:(net::ClientCertIdentityList)inputClientCerts {
   cert_identities_ = std::move(inputClientCerts);
 
+#ifndef NO_GOSTSSL
+    if( cert_identities_.size() == 1 && cert_identities_[0]->sec_identity_ref() == nullptr )
+    {
+        observer_->CertificateSelected( cert_identities_[0]->certificate(), nullptr );
+        return;
+    }
+#endif // GOSTSSL
+
   sec_identities_.reset([[NSMutableArray alloc] init]);
   for (const auto& cert : cert_identities_) {
     DCHECK(cert->sec_identity_ref());
diff --git a/chrome/installer/linux/common/chromium-browser/chromium-browser.info b/chrome/installer/linux/common/chromium-browser/chromium-browser.info
index 3593c9e797ef..9826523e0f36 100644
--- a/chrome/installer/linux/common/chromium-browser/chromium-browser.info
+++ b/chrome/installer/linux/common/chromium-browser/chromium-browser.info
@@ -6,22 +6,22 @@
 # chromium-browser packages for various platforms.
 
 # Base name of the package.
-PACKAGE="chromium-browser"
+PACKAGE="chromium-gost"
 
 # Filename of the main executable (for generating launcher scripts, etc.)
 PROGNAME=chrome
 
 # Base directory for package installation.
-INSTALLDIR=/opt/chromium.org/chromium
+INSTALLDIR=/opt/chromium-gost
 
 # Display string for desktop menu/icon.
-MENUNAME="Chromium Web Browser"
+MENUNAME="chromium-gost"
 
 # Brief package description.
-SHORTDESC="The web browser from Chromium.org"
+SHORTDESC="Chromium browser with GOST cryptography support"
 
 # Detailed package description.
-FULLDESC="Chromium is a browser that combines a minimal design with sophisticated technology to make the web faster, safer, and easier."
+FULLDESC="Chromium is a browser that combines a minimal design with sophisticated technology to make the web faster, safer, and easier. This version supports GOST cryptography in TLS-connections."
 
 # Package maintainer information.
 # TODO(mmoss) Setup a mailbox for this address
diff --git a/chrome/installer/linux/rpm/chrome.spec.template b/chrome/installer/linux/rpm/chrome.spec.template
index 55a35677b9c4..abbc16d5f5f1 100644
--- a/chrome/installer/linux/rpm/chrome.spec.template
+++ b/chrome/installer/linux/rpm/chrome.spec.template
@@ -122,6 +122,8 @@ add_nss_symlinks
 
 remove_udev_symlinks
 
+if false; then
+
 DEFAULTS_FILE="/etc/default/@@PACKAGE@@"
 if [ ! -e "$DEFAULTS_FILE" ]; then
   echo 'repo_add_once="true"' > "$DEFAULTS_FILE"
@@ -160,6 +162,8 @@ fi
 service atd start
 echo "sh /etc/cron.daily/@@PACKAGE@@" | at now + 2 minute > /dev/null 2>&1
 
+fi
+
 CHANNEL=@@CHANNEL@@
 case $CHANNEL in
   stable )
diff --git a/content/browser/storage_partition_impl.cc b/content/browser/storage_partition_impl.cc
index a9318c8de615..7c32f0c229ab 100644
--- a/content/browser/storage_partition_impl.cc
+++ b/content/browser/storage_partition_impl.cc
@@ -95,6 +95,10 @@
 #include "content/browser/host_zoom_map_impl.h"
 #endif  // defined(OS_ANDROID)
 
+#ifndef NO_GOSTSSL
+#include "net/ssl/ssl_platform_key_util.h"
+#endif // GOSTSSL
+
 #if BUILDFLAG(ENABLE_PLUGINS)
 #include "content/browser/plugin_private_storage_helper.h"
 #endif  // BUILDFLAG(ENABLE_PLUGINS)
@@ -760,6 +764,11 @@ class SSLClientAuthDelegate : public SSLClientAuthHandler::Delegate {
       scoped_refptr<net::X509Certificate> cert,
       scoped_refptr<net::SSLPrivateKey> private_key) override {
     DCHECK_CURRENTLY_ON(BrowserThread::IO);
+#ifndef NO_GOSTSSL
+    if (cert && !private_key) {
+        private_key = net::GetEmptyPrivateKey();
+    }
+#endif // GOSTSSL
     DCHECK((cert && private_key) || (!cert && !private_key));
 
     if (cert && private_key) {
diff --git a/net/base/net_error_list.h b/net/base/net_error_list.h
index 9a36c9780f16..0a7a55ccca09 100644
--- a/net/base/net_error_list.h
+++ b/net/base/net_error_list.h
@@ -22,6 +22,11 @@
 //   700-799 Certificate manager errors
 //   800-899 DNS resolver errors
 
+#ifndef NO_GOSTSSL
+//   3000-3099 GOSTSSL
+NET_ERROR(TLS_GOST_REQUIRED, -3072)
+#endif // GOSTSSL
+
 // An asynchronous IO operation is not yet complete.  This usually does not
 // indicate a fatal error.  Typically this error will be generated as a
 // notification to wait for some external notification that the IO operation
diff --git a/net/cert/cert_verify_proc.cc b/net/cert/cert_verify_proc.cc
index 0d0bfee61e98..f1513949221c 100644
--- a/net/cert/cert_verify_proc.cc
+++ b/net/cert/cert_verify_proc.cc
@@ -486,6 +486,12 @@ scoped_refptr<CertVerifyProc> CertVerifyProc::CreateBuiltinVerifyProc(
 
 CertVerifyProc::CertVerifyProc() {}
 
+#ifndef NO_GOSTSSL
+extern "C" {
+void gostssl_isgostcerthook( void * cert, int size, int * is_gost );
+}
+#endif // GOSTSSL
+
 CertVerifyProc::~CertVerifyProc() = default;
 
 int CertVerifyProc::Verify(X509Certificate* cert,
@@ -512,6 +518,23 @@ int CertVerifyProc::Verify(X509Certificate* cert,
   int rv = VerifyInternal(cert, hostname, ocsp_response, sct_list, flags,
                           crl_set, additional_trust_anchors, verify_result);
 
+#ifndef NO_GOSTSSL
+  int is_gost = 0;
+  {
+      {
+          const uint8_t * gostcert = CRYPTO_BUFFER_data( cert->cert_buffer() );
+          size_t gostcertlen =  CRYPTO_BUFFER_len( cert->cert_buffer() );
+          gostssl_isgostcerthook( (void *)gostcert, gostcertlen, &is_gost );
+      }
+  }
+
+  if( is_gost == 1 )
+  {
+      // TODO: we can check for weak GOST algos
+  }
+  else
+#endif // GOSTSSL
+
   // Check for mismatched signature algorithms and unknown signature algorithms
   // in the chain. Also fills in the has_* booleans for the digest algorithms
   // present in the chain.
diff --git a/net/http/http_network_transaction.cc b/net/http/http_network_transaction.cc
index 66c41641e4c5..5d69aa7b6290 100644
--- a/net/http/http_network_transaction.cc
+++ b/net/http/http_network_transaction.cc
@@ -1499,6 +1499,15 @@ int HttpNetworkTransaction::HandleSSLClientAuthError(int error) {
       }
     }
   }
+
+#ifndef NO_GOSTSSL
+  if( error == ERR_TLS_GOST_REQUIRED )
+  {
+    ResetConnectionAndRequestForResend();
+    return OK;
+  }
+#endif // GOSTSSL
+
   return error;
 }
 
diff --git a/net/socket/ssl_client_socket_impl.cc b/net/socket/ssl_client_socket_impl.cc
index df4f720c3146..4ec893b0065e 100644
--- a/net/socket/ssl_client_socket_impl.cc
+++ b/net/socket/ssl_client_socket_impl.cc
@@ -444,6 +444,14 @@ int SSLClientSocketImpl::ExportKeyingMaterial(const base::StringPiece& label,
   return OK;
 }
 
+#ifndef NO_GOSTSSL
+extern "C" {
+void gostssl_cachestring( SSL * s, const char * cachestring );
+void gostssl_certhook( void * cert, int size );
+void gostssl_verifyhook( void * s, unsigned * is_gost );
+}
+#endif // GOSTSSL
+
 int SSLClientSocketImpl::Connect(CompletionOnceCallback callback) {
   // Although StreamSocket does allow calling Connect() after Disconnect(),
   // this has never worked for layered sockets. CHECK to detect any consumers
@@ -462,6 +470,11 @@ int SSLClientSocketImpl::Connect(CompletionOnceCallback callback) {
     return rv;
   }
 
+#ifndef NO_GOSTSSL
+  gostssl_cachestring( ssl_.get(),
+    GetSessionCacheKey(base::nullopt).network_isolation_key.ToString().data() );
+#endif // GOSTSSL
+
   // Set SSL to client mode. Handshake happens in the loop below.
   SSL_set_connect_state(ssl_.get());
 
@@ -1159,6 +1172,82 @@ ssl_verify_result_t SSLClientSocketImpl::VerifyCert() {
 
   start_cert_verification_time_ = base::TimeTicks::Now();
 
+#ifndef NO_GOSTSSL
+#ifndef TRUST_E_CERT_SIGNATURE
+#define TRUST_E_CERT_SIGNATURE          0x80096004L
+#define CRYPT_E_REVOKED                 0x80092010L
+#define CERT_E_UNTRUSTEDROOT            0x800B0109L
+#define CERT_E_UNTRUSTEDTESTROOT        0x800B010DL
+#define CERT_E_REVOCATION_FAILURE       0x800B010EL
+#define CERT_E_EXPIRED                  0x800B0101L
+#define CERT_E_INVALID_NAME             0x800B0114L
+#define CERT_E_CN_NO_MATCH              0x800B010FL
+#define CERT_E_VALIDITYPERIODNESTING    0x800B0102L
+#define CRYPT_E_NO_REVOCATION_CHECK     0x80092012L
+#define CRYPT_E_REVOCATION_OFFLINE      0x80092013L
+#define CERT_E_CHAINING                 0x800B010AL
+#endif
+
+  {
+    {
+      unsigned gost_status;
+      gostssl_verifyhook( (void*)ssl_.get(), &gost_status );
+      if (gost_status) {
+        int gost_rv = OK;
+
+        switch (gost_status) {
+          case 1:
+            break;
+          case CERT_E_CN_NO_MATCH:
+          case CERT_E_INVALID_NAME:
+            gost_rv = ERR_CERT_COMMON_NAME_INVALID;
+            break;
+          case CERT_E_UNTRUSTEDROOT:
+          case TRUST_E_CERT_SIGNATURE:
+          case CERT_E_UNTRUSTEDTESTROOT:
+          case CERT_E_CHAINING:
+            gost_rv = ERR_CERT_AUTHORITY_INVALID;
+            break;
+          case CERT_E_EXPIRED:
+          case CERT_E_VALIDITYPERIODNESTING:
+            gost_rv = ERR_CERT_DATE_INVALID;
+            break;
+          case CRYPT_E_NO_REVOCATION_CHECK:
+          case CERT_E_REVOCATION_FAILURE:
+            gost_rv = ERR_CERT_NO_REVOCATION_MECHANISM;
+            break;
+          case CRYPT_E_REVOCATION_OFFLINE:
+            gost_rv = ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
+            break;
+          case CRYPT_E_REVOKED:
+            gost_rv = ERR_CERT_REVOKED;
+            break;
+          default:
+            gost_rv = ERR_CERT_INVALID;
+            break;
+        }
+
+        server_cert_verify_result_.Reset();
+        server_cert_verify_result_.verified_cert = server_cert_;
+
+        if( gost_rv == OK )
+        {
+          cert_verification_result_ = OK;
+        }
+        else
+        {
+          server_cert_verify_result_.cert_status =
+              MapNetErrorToCertStatus(gost_rv);
+          cert_verification_result_ = gost_rv;
+          OpenSSLPutNetError(FROM_HERE, gost_rv);
+        }
+
+        return gost_rv == OK ? ssl_verify_ok : ssl_verify_invalid;
+      }
+    }
+  }
+#endif // GOSTSSL
+
   const uint8_t* ocsp_response_raw;
   size_t ocsp_response_len;
   SSL_get0_ocsp_response(ssl_.get(), &ocsp_response_raw, &ocsp_response_len);
@@ -1620,6 +1709,18 @@ int SSLClientSocketImpl::ClientCertRequestCallback(SSL* ssl) {
     return -1;
   }
 
+#ifndef NO_GOSTSSL
+  if (client_cert_.get()) {
+    {
+      const uint8_t* cert =
+          CRYPTO_BUFFER_data(client_cert_.get()->cert_buffer());
+      size_t len =
+          CRYPTO_BUFFER_len(client_cert_.get()->cert_buffer());
+      gostssl_certhook( (void*)cert, len );
+    }
+  }
+#endif // GOSTSSL
+
   // Second pass: a client certificate should have been selected.
   if (client_cert_.get()) {
     if (!client_private_key_) {
diff --git a/net/spdy/spdy_session.cc b/net/spdy/spdy_session.cc
index fc2cb7cd24e8..d2fffce8516c 100644
--- a/net/spdy/spdy_session.cc
+++ b/net/spdy/spdy_session.cc
@@ -1518,6 +1518,18 @@ bool SpdySession::HasAcceptableTransportSecurity() const {
   SSLInfo ssl_info;
   CHECK(GetSSLInfo(&ssl_info));
 
+#ifndef NO_GOSTSSL
+  // GOST is acceptable, even in TLS 1.0
+  switch( SSLConnectionStatusToCipherSuite( ssl_info.connection_status ) )
+  {
+  case 0xff85: // GOST2012-GOST8912-GOST8912
+  case 0x0081: // GOST2001-GOST89-GOST89
+      return true;
+  default:
+      break;
+  }
+#endif // GOSTSSL
+
   // HTTP/2 requires TLS 1.2+
   if (SSLConnectionStatusToVersion(ssl_info.connection_status) <
       SSL_CONNECTION_VERSION_TLS1_2) {
diff --git a/net/ssl/client_cert_store_mac.cc b/net/ssl/client_cert_store_mac.cc
index fc448f463329..ad88f8f576cd 100644
--- a/net/ssl/client_cert_store_mac.cc
+++ b/net/ssl/client_cert_store_mac.cc
@@ -295,6 +295,12 @@ void AddIdentity(ScopedCFTypeRef<SecIdentityRef> sec_identity,
   }
 }
 
+#ifndef NO_GOSTSSL
+extern "C" {
+void gostssl_clientcertshook( char *** certs, int ** lens, wchar_t *** names, int * count, int * is_gost );
+}
+#endif // GOSTSSL
+
 ClientCertIdentityList GetClientCertsOnBackgroundThread(
     const SSLCertRequestInfo& request) {
   std::string server_domain = request.host_and_port.host();
@@ -385,6 +391,80 @@ ClientCertIdentityList GetClientCertsOnBackgroundThread(
   GetClientCertsImpl(std::move(preferred_identity),
                      std::move(regular_identities), request, true,
                      &selected_identities);
+
+#ifndef NO_GOSTSSL
+    {
+        {
+            char ** certs;
+            int * lens;
+            wchar_t ** names;
+            int count;
+            int is_gost;
+
+            gostssl_clientcertshook( &certs, &lens, &names, &count, &is_gost );
+
+            if( is_gost )
+                selected_identities.clear();
+
+            if( count )
+            {
+                CFMutableArrayRef certsValues = CFArrayCreateMutable( NULL, 0, &kCFTypeArrayCallBacks);
+
+                for( int i = 0; i < count; i++ )
+                {
+                    CFStringEncoding encoding = ( CFByteOrderLittleEndian == CFByteOrderGetCurrent() ) ? kCFStringEncodingUTF32LE : kCFStringEncodingUTF32BE;
+                    CFStringRef string = CFStringCreateWithBytes( NULL, (uint8_t *)names[i], wcslen( names[i] ) * sizeof( wchar_t ), encoding, false );
+                    CFArrayAppendValue( certsValues, string );
+                    CFRelease( string );
+                }
+
+                std::string authhost = request.host_and_port.host();
+                CFStringRef choose;
+                if( !authhost.empty() )
+                    choose = base::SysUTF8ToCFStringRef( "Выберите сертификат для аутентификации на https://" + authhost );
+                else
+                    choose = CFSTR( "Выберите сертификат для аутентификации" );
+
+                const void * keys[] = {
+                    kCFUserNotificationAlertHeaderKey,
+                    kCFUserNotificationAlertMessageKey,
+                    kCFUserNotificationDefaultButtonTitleKey,
+                    kCFUserNotificationAlternateButtonTitleKey,
+                    kCFUserNotificationCheckBoxTitlesKey
+                };
+                const void * values[] = {
+                    CFSTR( "Выбор сертификата" ),
+                    choose,
+                    CFSTR( "ОК" ),
+                    CFSTR( "Отмена" ),
+                    certsValues
+                };
+                CFDictionaryRef parameters = CFDictionaryCreate( NULL, keys, values, 5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks );
+
+                SInt32 err = 0;
+                CFUserNotificationRef dialog = CFUserNotificationCreate( NULL, 0, kCFUserNotificationUseRadioButtonsFlag | kCFUserNotificationNoteAlertLevel | CFUserNotificationCheckBoxChecked( 0 ), &err, parameters );
+                CFOptionFlags responseFlags = 0;
+                CFUserNotificationReceiveResponse( dialog, 0, &responseFlags );
+                CFRelease( choose );
+                CFRelease( certsValues );
+                CFRelease( parameters );
+                CFRelease( dialog );
+                if( !( responseFlags & kCFUserNotificationCancelResponse ) )
+                {
+                    for( int i = 0; i < count; i++ )
+                        if( responseFlags & CFUserNotificationCheckBoxChecked( i ) )
+                        {
+                            ScopedCFTypeRef<SecIdentityRef> sec_identity;
+                            scoped_refptr<X509Certificate> cert( X509Certificate::CreateFromBytes( certs[i], lens[i] ) );
+                            selected_identities.push_back( std::make_unique<ClientCertIdentityMac>( cert, std::move( sec_identity ) ) );
+                            break;
+                        }
+                }
+            }
+        }
+    }
+#endif // GOSTSSL
+
   return selected_identities;
 }
 
diff --git a/net/ssl/client_cert_store_nss.cc b/net/ssl/client_cert_store_nss.cc
index f4d3e893c231..e5703217e647 100644
--- a/net/ssl/client_cert_store_nss.cc
+++ b/net/ssl/client_cert_store_nss.cc
@@ -146,6 +146,12 @@ void ClientCertStoreNSS::FilterCertsOnWorkerThread(
   std::sort(identities->begin(), identities->end(), ClientCertIdentitySorter());
 }
 
+#ifndef NO_GOSTSSL
+extern "C" {
+void gostssl_clientcertshook( char *** certs, int ** lens, wchar_t *** names, int * count, int * is_gost );
+}
+#endif // GOSTSSL
+
 ClientCertIdentityList ClientCertStoreNSS::GetAndFilterCertsOnWorkerThread(
     scoped_refptr<crypto::CryptoModuleBlockingPasswordDelegate>
         password_delegate,
@@ -160,6 +166,31 @@ ClientCertIdentityList ClientCertStoreNSS::GetAndFilterCertsOnWorkerThread(
   GetPlatformCertsOnWorkerThread(std::move(password_delegate), CertFilter(),
                                  &selected_identities);
   FilterCertsOnWorkerThread(&selected_identities, *request);
+
+#ifndef NO_GOSTSSL
+    {
+        {
+            char ** certs;
+            int * lens;
+            int count;
+            int is_gost;
+
+            gostssl_clientcertshook( &certs, &lens, NULL, &count, &is_gost );
+
+            if( is_gost )
+            {
+                selected_identities.clear();
+                for( int i = 0; i < count; i++ )
+                {
+                    scoped_refptr<X509Certificate> cert( X509Certificate::CreateFromBytes( certs[i], lens[i] ) );
+                    selected_identities.push_back( std::make_unique<ClientCertIdentityNSS>( cert, x509_util::CreateCERTCertificateFromBytes( (uint8_t *)certs[i], lens[i] ), password_delegate) );
+                    std::sort(selected_identities.begin(), selected_identities.end(), ClientCertIdentitySorter());
+                }
+            }
+        }
+    }
+#endif // GOSTSSL
+
   return selected_identities;
 }
 
diff --git a/net/ssl/openssl_ssl_util.cc b/net/ssl/openssl_ssl_util.cc
index f5185218e4ee..008e15d9f007 100644
--- a/net/ssl/openssl_ssl_util.cc
+++ b/net/ssl/openssl_ssl_util.cc
@@ -84,6 +84,10 @@ int MapOpenSSLErrorSSL(uint32_t error_code) {
     case SSL_R_TLSV1_ALERT_PROTOCOL_VERSION:
     case SSL_R_UNSUPPORTED_PROTOCOL:
       return ERR_SSL_VERSION_OR_CIPHER_MISMATCH;
+#ifndef NO_GOSTSSL
+    case SSL_R_TLS_GOST_REQUIRED:
+      return ERR_TLS_GOST_REQUIRED;
+#endif // GOSTSSL
     case SSL_R_SSLV3_ALERT_BAD_CERTIFICATE:
     case SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE:
     case SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED:
diff --git a/net/ssl/ssl_cipher_suite_names.cc b/net/ssl/ssl_cipher_suite_names.cc
index 1156ff1774b5..7e90ebe3d660 100644
--- a/net/ssl/ssl_cipher_suite_names.cc
+++ b/net/ssl/ssl_cipher_suite_names.cc
@@ -66,6 +66,27 @@ void SSLCipherSuiteToStrings(const char** key_exchange_str,
   *is_aead = false;
   *is_tls13 = false;
 
+#ifndef NO_GOSTSSL
+  switch( cipher_suite )
+  {
+  case 0x0081: // GOST2001-GOST89-GOST89
+      *key_exchange_str = "GOSTR341001";
+      *cipher_str = "GOST28147CNT";
+      *mac_str = "GOST28147IMIT";
+      return;
+
+  case 0xff85: // GOST2012-GOST8912-GOST8912
+      *key_exchange_str = "GOSTR341012";
+      *cipher_str = "GOST28147CNT";
+      *mac_str = "GOST28147IMIT";
+      return;
+
+  default:
+      break;
+
+  }
+#endif // GOSTSSL
+
   const SSL_CIPHER* cipher = SSL_get_cipher_by_value(cipher_suite);
   if (!cipher)
     return;
@@ -179,6 +200,11 @@ int ObsoleteSSLStatus(int connection_status, uint16_t signature_algorithm) {
   obsolete_ssl |= ObsoleteSSLStatusForProtocol(ssl_version);
 
   uint16_t cipher_suite = SSLConnectionStatusToCipherSuite(connection_status);
+#ifndef NO_GOSTSSL
+  if( cipher_suite == 0x0081 /* GOST2001-GOST89-GOST89 */ || 
+      cipher_suite == 0xff85 /* GOST2012-GOST8912-GOST8912 */ )
+    return OBSOLETE_SSL_NONE;
+#endif // GOSTSSL
   obsolete_ssl |= ObsoleteSSLStatusForCipherSuite(cipher_suite);
 
   obsolete_ssl |= ObsoleteSSLStatusForSignature(signature_algorithm);
diff --git a/net/ssl/ssl_platform_key_util.cc b/net/ssl/ssl_platform_key_util.cc
index 9baac3b2db27..512ae099ec7e 100644
--- a/net/ssl/ssl_platform_key_util.cc
+++ b/net/ssl/ssl_platform_key_util.cc
@@ -51,6 +51,27 @@ scoped_refptr<base::SingleThreadTaskRunner> GetSSLPlatformKeyTaskRunner() {
   return g_platform_key_task_runner.Get().task_runner();
 }
 
+#ifndef NO_GOSTSSL
+class SSLEmptyPrivateKey : public ThreadedSSLPrivateKey::Delegate {
+ public:
+  SSLEmptyPrivateKey() {}
+  ~SSLEmptyPrivateKey() override {}
+  std::string GetProviderName() override { return "EmptyPrivateKey"; }
+  std::vector<uint16_t> GetAlgorithmPreferences() override { return {}; }
+  Error Sign(uint16_t algorithm,
+             base::span<const uint8_t> input,
+             std::vector<uint8_t>* signature) override {
+    return ERR_SSL_CLIENT_AUTH_SIGNATURE_FAILED;
+  }
+ private:
+  DISALLOW_COPY_AND_ASSIGN(SSLEmptyPrivateKey);
+};
+scoped_refptr<SSLPrivateKey> GetEmptyPrivateKey() {
+  return base::MakeRefCounted<ThreadedSSLPrivateKey>(
+      std::make_unique<SSLEmptyPrivateKey>(), GetSSLPlatformKeyTaskRunner());
+}
+#endif // GOSTSSL
+
 bssl::UniquePtr<EVP_PKEY> GetClientCertPublicKey(
     const X509Certificate* certificate) {
   crypto::OpenSSLErrStackTracer tracker(FROM_HERE);
diff --git a/net/ssl/ssl_platform_key_util.h b/net/ssl/ssl_platform_key_util.h
index 02729fecba76..a586e0c5e237 100644
--- a/net/ssl/ssl_platform_key_util.h
+++ b/net/ssl/ssl_platform_key_util.h
@@ -15,6 +15,9 @@
 #include "base/optional.h"
 #include "base/single_thread_task_runner.h"
 #include "net/base/net_export.h"
+#ifndef NO_GOSTSSL
+#include "net/ssl/threaded_ssl_private_key.h"
+#endif // GOSTSSL
 #include "third_party/boringssl/src/include/openssl/base.h"
 
 namespace net {
@@ -28,6 +31,10 @@ class X509Certificate;
 NET_EXPORT_PRIVATE scoped_refptr<base::SingleThreadTaskRunner>
 GetSSLPlatformKeyTaskRunner();
 
+#ifndef NO_GOSTSSL
+NET_EXPORT_PRIVATE scoped_refptr<SSLPrivateKey> GetEmptyPrivateKey();
+#endif // GOSTSSL
+
 // Returns the public key of |certificate| as an |EVP_PKEY| or nullptr on error.
 bssl::UniquePtr<EVP_PKEY> GetClientCertPublicKey(
     const X509Certificate* certificate);
diff --git a/sandbox/win/src/process_mitigations.cc b/sandbox/win/src/process_mitigations.cc
index e4c6838f96f8..6b0792b4c927 100644
--- a/sandbox/win/src/process_mitigations.cc
+++ b/sandbox/win/src/process_mitigations.cc
@@ -221,6 +221,7 @@ bool ApplyProcessMitigationsToCurrentProcess(MitigationFlags flags) {
     // Verify caller is not accidentally setting both mutually exclusive
     // policies.
     DCHECK(!(flags & MITIGATION_DYNAMIC_CODE_DISABLE_WITH_OPT_OUT));
+#ifdef NO_GOSTSSL
     PROCESS_MITIGATION_DYNAMIC_CODE_POLICY policy = {};
     policy.ProhibitDynamicCode = true;
 
@@ -229,6 +230,7 @@ bool ApplyProcessMitigationsToCurrentProcess(MitigationFlags flags) {
         ERROR_ACCESS_DENIED != ::GetLastError()) {
       return false;
     }
+#endif // GOSTSSL
   }
 
   if (version < base::win::Version::WIN10)
@@ -251,6 +253,7 @@ bool ApplyProcessMitigationsToCurrentProcess(MitigationFlags flags) {
 
   // Enable binary signing policies.
   if (flags & MITIGATION_FORCE_MS_SIGNED_BINS) {
+#ifdef NO_GOSTSSL
     PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY policy = {};
     // Allow only MS signed binaries.
     policy.MicrosoftSignedOnly = true;
@@ -263,6 +266,7 @@ bool ApplyProcessMitigationsToCurrentProcess(MitigationFlags flags) {
         ERROR_ACCESS_DENIED != ::GetLastError()) {
       return false;
     }
+#endif // GOSTSSL
   }
 
   // Enable image load policies.
diff --git a/services/service_manager/sandbox/mac/common.sb b/services/service_manager/sandbox/mac/common.sb
index e6e367aec142..da29af7f1c95 100644
--- a/services/service_manager/sandbox/mac/common.sb
+++ b/services/service_manager/sandbox/mac/common.sb
@@ -120,6 +120,14 @@
   (subpath "/usr/lib")
 )
 
+(allow file*
+  (subpath "/opt/cprocsp")
+  (subpath "/etc/opt/cprocsp")
+  (subpath "/var/opt/cprocsp")
+  (subpath "/private/etc/opt/cprocsp")
+  (subpath "/private/var/opt/cprocsp")
+)
+
 ; Reads from /etc.
 ; This is read by CFPrefs calling getpwuid in a loop. libinfo then fails to
 ; contact any of the opendirectoryd mach services, and falls back to
diff --git a/third_party/boringssl/BUILD.generated.gni b/third_party/boringssl/BUILD.generated.gni
index 56bc2574eab0..91da78dc19f7 100644
--- a/third_party/boringssl/BUILD.generated.gni
+++ b/third_party/boringssl/BUILD.generated.gni
@@ -5,6 +5,8 @@
 # This file is created by generate_build_files.py. Do not edit manually.
 
 crypto_sources = [
+  "gostssl.cpp",
+  "msspi.cpp",
   "err_data.c",
   "src/crypto/asn1/a_bitstr.c",
   "src/crypto/asn1/a_bool.c",
-- 
2.17.0.windows.1

